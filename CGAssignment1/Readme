This project relies on the boost framework! Specifically, it uses boost::shared_ptr
to simplify reference counting and pointer management for the scene graph.

Install boost here: http://www.boost.org/users/download/

I attempted to create a couple of utility classes to help with this project.
CGMouseInput provides a framework for handling mouse input, providing several utility
functions and hooks for ease of use. Basically, you set the static member function pointers
that implement functionality on each kind of mouse action, click, drag, move, etc,
and CGMouseInput will make sure that the correct callbacks are registered in GLUT's
mouse functions.

The makefile should successfully compile the CGAssignment1 application. There's also
a couple of other targets, mostly various unit tests for parts of the application.

Another part of the project is a very simplified scene graph in order to help manage
the drawing, updating, and persistance of objects in the system. It's a very simple
tree structure, with the "scene manager" having a pointer to a root node, and each node
allowed to have any number of children pointers. This allows for a bit of hierarchy when
drawing the scene. For basic use, create a global CGNodeManager to serve as the entry
point for the scene graph. (In the future, I hope to implement some sort of dependency 
injection rather than relying on globals, but I ran out of time for this version
of the project).

Various geometric primitives can be based on this simple structure, simply by subclassing
CGNode. I've implemented both CGCircle and CGRectangle myself for use with this project,
but many other kinds of objects can be created with this framework.


Build Instructions:

    `make all` will build the project and all dependencies
    
    Make sure to use the makefile in the root directory, not the one in the Debug directory.
    That makefile is automatically generated by eclipse and won't work if you're not on the
    Mac OSX platform.